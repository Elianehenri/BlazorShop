@page "/products/delete/{id:int}"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [Authorize]

@if (Model is null)
{
    <p class="text-center">
        <em>Produto não encontrado</em>
    </p>
}
else
{
    <h1>@Model.Title (@Model.Id)</h1>
    <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nome do produto</label>
            <InputText @bind-Value="Model.Title" class="form-control" readonly />
            <ValidationMessage For="@(() => Model.Title)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Preço</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" readonly />
            <ValidationMessage For="@(() => Model.Price)" />
        </div>

        <button type="submit" class="btn btn-danger">
            Excluir
        </button>
        <a href="/products">Cancelar</a>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    public Product Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Context
            .Products
            .AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
        if (Model == null)
        {
            // Adicione uma mensagem de log ou depuração para entender por que o produto não foi encontrado.
            Console.WriteLine($"Produto com ID {Id} não encontrado.");
        }
    }

    public async Task OnValidSubmit()
    {
        Context.Products.Remove(Model);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("products");
    }
}